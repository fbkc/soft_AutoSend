//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace AutoSend.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HeartSoap", Namespace="http://autosend.com/")]
    public partial class Heart : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HeartbeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetggOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetHeartOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePassWordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIsUseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Heart() {
            this.Url = global::AutoSend.Properties.Settings.Default.搏世营销系统_WebReference_Heart;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HeartbeatCompletedEventHandler HeartbeatCompleted;
        
        /// <remarks/>
        public event GetggCompletedEventHandler GetggCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event SetHeartCompletedEventHandler SetHeartCompleted;
        
        /// <remarks/>
        public event UpdatePassWordCompletedEventHandler UpdatePassWordCompleted;
        
        /// <remarks/>
        public event SetIsUseCompletedEventHandler SetIsUseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/Heartbeat", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Heartbeat() {
            object[] results = this.Invoke("Heartbeat", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HeartbeatAsync() {
            this.HeartbeatAsync(null);
        }
        
        /// <remarks/>
        public void HeartbeatAsync(object userState) {
            if ((this.HeartbeatOperationCompleted == null)) {
                this.HeartbeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHeartbeatOperationCompleted);
            }
            this.InvokeAsync("Heartbeat", new object[0], this.HeartbeatOperationCompleted, userState);
        }
        
        private void OnHeartbeatOperationCompleted(object arg) {
            if ((this.HeartbeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HeartbeatCompleted(this, new HeartbeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/Getgg", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Getgg() {
            object[] results = this.Invoke("Getgg", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetggAsync() {
            this.GetggAsync(null);
        }
        
        /// <remarks/>
        public void GetggAsync(object userState) {
            if ((this.GetggOperationCompleted == null)) {
                this.GetggOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetggOperationCompleted);
            }
            this.InvokeAsync("Getgg", new object[0], this.GetggOperationCompleted, userState);
        }
        
        private void OnGetggOperationCompleted(object arg) {
            if ((this.GetggCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetggCompleted(this, new GetggCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/Login", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string strpass) {
            object[] results = this.Invoke("Login", new object[] {
                        strpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string strpass) {
            this.LoginAsync(strpass, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string strpass, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        strpass}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/SetHeart", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetHeart(string strpass) {
            this.Invoke("SetHeart", new object[] {
                        strpass});
        }
        
        /// <remarks/>
        public void SetHeartAsync(string strpass) {
            this.SetHeartAsync(strpass, null);
        }
        
        /// <remarks/>
        public void SetHeartAsync(string strpass, object userState) {
            if ((this.SetHeartOperationCompleted == null)) {
                this.SetHeartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetHeartOperationCompleted);
            }
            this.InvokeAsync("SetHeart", new object[] {
                        strpass}, this.SetHeartOperationCompleted, userState);
        }
        
        private void OnSetHeartOperationCompleted(object arg) {
            if ((this.SetHeartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetHeartCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/UpdatePassWord", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePassWord(string strpass) {
            object[] results = this.Invoke("UpdatePassWord", new object[] {
                        strpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePassWordAsync(string strpass) {
            this.UpdatePassWordAsync(strpass, null);
        }
        
        /// <remarks/>
        public void UpdatePassWordAsync(string strpass, object userState) {
            if ((this.UpdatePassWordOperationCompleted == null)) {
                this.UpdatePassWordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePassWordOperationCompleted);
            }
            this.InvokeAsync("UpdatePassWord", new object[] {
                        strpass}, this.UpdatePassWordOperationCompleted, userState);
        }
        
        private void OnUpdatePassWordOperationCompleted(object arg) {
            if ((this.UpdatePassWordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePassWordCompleted(this, new UpdatePassWordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://autosend.com/SetIsUse", RequestNamespace="http://autosend.com/", ResponseNamespace="http://autosend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetIsUse(string strpass) {
            object[] results = this.Invoke("SetIsUse", new object[] {
                        strpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetIsUseAsync(string strpass) {
            this.SetIsUseAsync(strpass, null);
        }
        
        /// <remarks/>
        public void SetIsUseAsync(string strpass, object userState) {
            if ((this.SetIsUseOperationCompleted == null)) {
                this.SetIsUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIsUseOperationCompleted);
            }
            this.InvokeAsync("SetIsUse", new object[] {
                        strpass}, this.SetIsUseOperationCompleted, userState);
        }
        
        private void OnSetIsUseOperationCompleted(object arg) {
            if ((this.SetIsUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIsUseCompleted(this, new SetIsUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void HeartbeatCompletedEventHandler(object sender, HeartbeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HeartbeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HeartbeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetggCompletedEventHandler(object sender, GetggCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetggCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetggCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetHeartCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UpdatePassWordCompletedEventHandler(object sender, UpdatePassWordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePassWordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePassWordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetIsUseCompletedEventHandler(object sender, SetIsUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIsUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIsUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591